{"ast":null,"code":"import { parseOnlyLetterAndSpace, parseLength } from '../services/inputParser';\nimport { checkAtLeastLength, checkEmailPattern, checkIsfilled, checkIsTrue } from '../services/inputValidator';\nconst registrationModel = [{\n  name: 'Email Address',\n  test: 'input-field required',\n  label: 'Your valid email address.',\n  type: 'text',\n  placeholder: 'Input mail address',\n  validators: [{\n    id: 'mail-pattern',\n    isValidFun: checkEmailPattern,\n    alert: 'Email is not valid'\n  }, {\n    id: 'email-required',\n    isValidFun: checkIsfilled,\n    alert: 'Email is empty'\n  }]\n}, {\n  name: 'Companyname',\n  test: 'input-field required',\n  label: 'Your registered company name. Example: \"VASP LTD.\"',\n  type: 'text',\n  placeholder: 'Your company name',\n  parseFun: parseOnlyLetterAndSpace,\n  validators: [{\n    id: 'CompanyName-length',\n    isValidFun: expression => checkAtLeastLength(expression, 3),\n    alert: 'Company name is too short'\n  }]\n}, {\n  name: 'VASPcodeName',\n  test: 'input-field required',\n  label: '4 uppercase letters to represent your company name. Example: \"Coinbase exchange\" could be \"CBSE\", \"Sygna\" could be \"SYGN\"',\n  type: 'text',\n  placeholder: 'Input VASP code Name',\n  parseFun: parseOnlyLetterAndSpace,\n  validators: [{\n    id: 'VASPcodeName-length',\n    isValidFun: expression => checkAtLeastLength(expression, 4),\n    alert: 'VASP code name is too short'\n  }]\n}, {\n  name: 'CountryCode',\n  test: 'input-field required',\n  label: 'Country location of your company jurisdiction. Please follow ISO 3166-1 alpha-2 country code.',\n  type: 'select',\n  options: [{\n    value: '',\n    name: 'Select'\n  }, {\n    value: '1',\n    name: 'Option1'\n  }, {\n    value: '2',\n    name: 'Option2'\n  }, {\n    value: '3',\n    name: 'Option3'\n  }],\n  validators: [{\n    id: 'CountryCode-required',\n    isValidFun: checkIsfilled,\n    alert: 'Country code is not selected'\n  }]\n}, {\n  name: 'CityCode',\n  test: 'input-field required',\n  label: '2 letters city abbreviation. Example: \"NY\"',\n  type: 'text',\n  placeholder: 'Input city code',\n  parseFun: parseOnlyLetterAndSpace,\n  validators: [{\n    id: 'CityCode-length',\n    isValidFun: expression => checkAtLeastLength(expression, 2),\n    alert: 'City code is too short'\n  }]\n}, {\n  name: 'Company ID',\n  test: 'input-field',\n  label: 'Company registration code under local jurisdiction.',\n  type: 'text',\n  placeholder: 'Input company ID'\n}, {\n  name: 'VASPcategory',\n  test: 'input-field required',\n  type: 'select',\n  options: [{\n    value: '',\n    name: 'Select'\n  }, {\n    value: '1',\n    name: 'Virtual/Flatl'\n  }, {\n    value: '2',\n    name: 'Virtual/Virtual'\n  }, {\n    value: '3',\n    name: 'Transfer'\n  }, {\n    value: '4',\n    name: 'Custodian'\n  }, {\n    value: '5',\n    name: 'Other'\n  }],\n  validators: [{\n    id: 'VASPcategory-required',\n    isValidFun: checkIsfilled,\n    alert: 'VASP category is not selected'\n  }]\n}, {\n  name: 'Beneficiary VASP API endpoint URL',\n  test: 'input-field required',\n  label: 'API endpoint for beneficiary VASP to receive API request from Bridge Server (http://bit.ly/2NhZUlS). Example: \"beneficiary.example/api/v1/bridge/transaction/permission-request\"',\n  type: 'text',\n  placeholder: 'Input beneficiary VASP API endpoint URL',\n  parseFun: parseOnlyLetterAndSpace,\n  validators: [{\n    id: 'VASP-API-URL-length',\n    isValidFun: checkIsfilled,\n    alert: 'VASP API URL is empty'\n  }]\n}, {\n  name: 'Fixed static IP Address',\n  test: 'input-field',\n  label: 'To create a secure communication tunnel between Bridge and VASP servers, Bridge can register VASP server static IP for identification. (optional)',\n  type: 'text',\n  placeholder: 'Input fixed static IP address'\n}, {\n  name: 'Go-Live Date',\n  test: 'input-field',\n  label: 'Default date: three days after the registration is done.',\n  typeDate: 'text'\n}, {\n  name: 'VASP Public Key',\n  test: 'input-field required',\n  label: 'For other VASPs to encrypt private information. Please see Key pair generation for more details.',\n  type: 'select',\n  options: [{\n    value: '',\n    name: 'Select Public Type'\n  }, {\n    value: '1',\n    name: 'HEX'\n  }, {\n    value: '2',\n    name: 'PEM'\n  }],\n  validators: [{\n    id: 'VASPpublicKey-required',\n    isValidFun: checkIsfilled,\n    alert: 'VASP public key is not selected'\n  }]\n}];\nexport default registrationModel;","map":{"version":3,"sources":["/Users/miachiu/Projects/sygna-brige/src/models/registrationModel.js"],"names":["parseOnlyLetterAndSpace","parseLength","checkAtLeastLength","checkEmailPattern","checkIsfilled","checkIsTrue","registrationModel","name","test","label","type","placeholder","validators","id","isValidFun","alert","parseFun","expression","options","value","typeDate"],"mappings":"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","sourcesContent":["import { parseOnlyLetterAndSpace, parseLength } from '../services/inputParser';\nimport { checkAtLeastLength, checkEmailPattern, checkIsfilled, checkIsTrue } from '../services/inputValidator';\n\nconst registrationModel = [{\n    name: 'Email Address',\n    test: 'input-field required',\n    label: 'Your valid email address.',\n    type: 'text',\n    placeholder: 'Input mail address',\n    validators: [{\n        id: 'mail-pattern',\n        isValidFun: checkEmailPattern,\n        alert: 'Email is not valid'\n    }, {\n        id: 'email-required',\n        isValidFun: checkIsfilled,\n        alert: 'Email is empty'\n    }]\n}, {\n    name: 'Companyname',\n    test: 'input-field required',\n    label: 'Your registered company name. Example: \"VASP LTD.\"',\n    type: 'text',\n    placeholder: 'Your company name',\n    parseFun: parseOnlyLetterAndSpace,\n    validators: [{\n        id: 'CompanyName-length',\n        isValidFun: expression => checkAtLeastLength(expression, 3),\n        alert: 'Company name is too short'\n    }]\n}, {\n    name: 'VASPcodeName',\n    test: 'input-field required',\n    label: '4 uppercase letters to represent your company name. Example: \"Coinbase exchange\" could be \"CBSE\", \"Sygna\" could be \"SYGN\"',\n    type: 'text',\n    placeholder: 'Input VASP code Name',\n    parseFun: parseOnlyLetterAndSpace,\n    validators: [{\n        id: 'VASPcodeName-length',\n        isValidFun: expression => checkAtLeastLength(expression, 4),\n        alert: 'VASP code name is too short'\n    }]\n}, {\n    name: 'CountryCode',\n    test: 'input-field required',\n    label: 'Country location of your company jurisdiction. Please follow ISO 3166-1 alpha-2 country code.',\n    type: 'select',\n    options: [\n        { value: '', name: 'Select' },\n        { value: '1', name: 'Option1' },\n        { value: '2', name: 'Option2' },\n        { value: '3', name: 'Option3' }\n    ],\n    validators: [{\n        id: 'CountryCode-required',\n        isValidFun: checkIsfilled,\n        alert: 'Country code is not selected'\n    }]\n}, {\n    name: 'CityCode',\n    test: 'input-field required',\n    label: '2 letters city abbreviation. Example: \"NY\"',\n    type: 'text',\n    placeholder: 'Input city code',\n    parseFun: parseOnlyLetterAndSpace,\n    validators: [{\n        id: 'CityCode-length',\n        isValidFun: expression => checkAtLeastLength(expression, 2),\n        alert: 'City code is too short'\n    }]\n}, {\n    name: 'Company ID',\n    test: 'input-field',\n    label: 'Company registration code under local jurisdiction.',\n    type: 'text',\n    placeholder: 'Input company ID'\n}, {\n    name: 'VASPcategory',\n    test: 'input-field required',\n    type: 'select',\n    options: [\n        { value: '', name: 'Select' },\n        { value: '1', name: 'Virtual/Flatl' },\n        { value: '2', name: 'Virtual/Virtual' },\n        { value: '3', name: 'Transfer' },\n        { value: '4', name: 'Custodian' },\n        { value: '5', name: 'Other' }\n    ],\n    validators: [{\n        id: 'VASPcategory-required',\n        isValidFun: checkIsfilled,\n        alert: 'VASP category is not selected'\n    }]\n}, {\n    name: 'Beneficiary VASP API endpoint URL',\n    test: 'input-field required',\n    label: 'API endpoint for beneficiary VASP to receive API request from Bridge Server (http://bit.ly/2NhZUlS). Example: \"beneficiary.example/api/v1/bridge/transaction/permission-request\"',\n    type: 'text',\n    placeholder: 'Input beneficiary VASP API endpoint URL',\n    parseFun: parseOnlyLetterAndSpace,\n    validators: [{\n        id: 'VASP-API-URL-length',\n        isValidFun: checkIsfilled,\n        alert: 'VASP API URL is empty'\n    }]\n}, {\n    name: 'Fixed static IP Address',\n    test: 'input-field',\n    label: 'To create a secure communication tunnel between Bridge and VASP servers, Bridge can register VASP server static IP for identification. (optional)',\n    type: 'text',\n    placeholder: 'Input fixed static IP address'\n}, {\n    name: 'Go-Live Date',\n    test: 'input-field',\n    label: 'Default date: three days after the registration is done.',\n    typeDate: 'text'\n}, {\n    name: 'VASP Public Key',\n    test: 'input-field required',\n    label: 'For other VASPs to encrypt private information. Please see Key pair generation for more details.',\n    type: 'select',\n    options: [\n        { value: '', name: 'Select Public Type' },\n        { value: '1', name: 'HEX' },\n        { value: '2', name: 'PEM' }\n    ],\n    validators: [{\n        id: 'VASPpublicKey-required',\n        isValidFun: checkIsfilled,\n        alert: 'VASP public key is not selected'\n    }]\n}];\n\nexport default registrationModel;"]},"metadata":{},"sourceType":"module"}