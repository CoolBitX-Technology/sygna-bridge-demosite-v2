{"ast":null,"code":"var _jsxFileName = \"/Users/miachiu/Projects/sygna-brige/src/components/FormPanel.js\";\nimport React from 'react';\nimport useForm from '../hooks/useForm';\nimport TextInput from './inputs/TextInput';\nimport TextareaInput from './inputs/TextareaInput';\nimport SelectInput from './inputs/SelectInput'; //import TimeInput from './inputs/TimeInput';\n\nfunction KeyPair() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h6\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }, \"Key pair generation\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, \"This short guide will help you to generate a key pair via the OpenSSL command line tool, in order to provide the public key to Bridge.\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 15\n    }\n  }), \"Generate an EC private key, of size 256, and output it to a file named key.pem: >> $ openssl ecparam -name secp256k1 -genkey -out key.pem\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 15\n    }\n  }), \"Extract the public key from the key pair, which can be used in the encryption: >> $ openssl ec -in key.pem -pubout -out public.pem\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 15\n    }\n  }), \"After running these two commands you will generate two files: key.pem and public.pem in your working directory. Please provide us with the public.pem key.pem is referenced in the creation of a digital signature on the message. Please take care not to expose the private key. Ensure that you only do so on a system you consider to be secure.\"));\n}\n\nfunction CTAtxt() {\n  return /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, \"If you have any questions with the information in this email, please let us know at\", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"mailto:contact@sygna.io\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"contact@sygna.io\"), \" or visit our website at\", /*#__PURE__*/React.createElement(\"a\", {\n    href: \"sygna.io\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"sygna.io\"));\n}\n\nfunction FormPanel({\n  title,\n  btnName,\n  submitCallback,\n  model\n}) {\n  const [inputs, setInputs, setSubmit] = useForm(model, submitCallback);\n  const Components = {\n    TextInput,\n    TextareaInput,\n    SelectInput\n  };\n\n  const capitalize = expression => expression.charAt(0).toUpperCase() + expression.slice(1);\n\n  const renderInput = input => {\n    const Component = Components[capitalize(input.type) + 'Input']; //const Component = Components[input.type + 'Input'];\n\n    return /*#__PURE__*/React.createElement(Component, Object.assign({\n      key: input.name,\n      setInputs: setInputs\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"intro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, title)), /*#__PURE__*/React.createElement(\"form\", {\n    id: \"registration_form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, inputs.map(input => renderInput(input)), /*#__PURE__*/React.createElement(KeyPair, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cta_block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CTAtxt, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cta\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"\\b   \", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"submit\",\n    onClick: setSubmit,\n    value: btnName,\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default FormPanel;","map":{"version":3,"sources":["/Users/miachiu/Projects/sygna-brige/src/components/FormPanel.js"],"names":["React","useForm","TextInput","TextareaInput","SelectInput","KeyPair","CTAtxt","FormPanel","title","btnName","submitCallback","model","inputs","setInputs","setSubmit","Components","capitalize","expression","charAt","toUpperCase","slice","renderInput","input","Component","type","name","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport useForm from '../hooks/useForm';\nimport TextInput from './inputs/TextInput';\nimport TextareaInput from './inputs/TextareaInput';\nimport SelectInput from './inputs/SelectInput';\n//import TimeInput from './inputs/TimeInput';\n\nfunction KeyPair() {\n  return (\n    <div className=\"info\">\n      <h6>Key pair generation</h6>\n      <p>\n        This short guide will help you to generate a key pair via the OpenSSL command line tool, in order to\n        provide the public key to Bridge.\n        <br /><br />\n        Generate an EC private key, of size 256, and output it to a file named key.pem:\n        >> $ openssl ecparam -name secp256k1 -genkey -out key.pem\n        <br /><br />\n        Extract the public key from the key pair, which can be used in the encryption:\n        >> $ openssl ec -in key.pem -pubout -out public.pem\n        <br /><br />\n        After running these two commands you will generate two files: key.pem and public.pem in your working\n        directory. Please provide us with the public.pem\n        key.pem is referenced in the creation of a digital signature on the message. Please take care not to\n        expose the private key. Ensure that you only do so on a system you consider to be secure.\n      </p>\n    </div>\n  );\n}\n\nfunction CTAtxt() {\n  return (\n    <p className=\"text\">\n      If you have any questions with the information in this email, please let us know at \n      <a href=\"mailto:contact@sygna.io\">contact@sygna.io</a> or visit our website at \n      <a href=\"sygna.io\" target=\"_blank\">sygna.io</a>\n    </p>\n  );\n}\n\nfunction FormPanel({ title, btnName, submitCallback, model }) {\n  const [inputs, setInputs, setSubmit] = useForm(model, submitCallback);\n\n  const Components = { TextInput, TextareaInput, SelectInput };\n\n  const capitalize = expression => expression.charAt(0).toUpperCase() + expression.slice(1);\n\n  const renderInput = input => {\n    const Component = Components[capitalize(input.type) + 'Input'];\n    //const Component = Components[input.type + 'Input'];\n    return <Component key={input.name} setInputs={setInputs} {...input} />;\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"intro\">\n        <h2 className=\"\">{title}</h2>\n      </div>\n      <form id=\"registration_form\">\n        {inputs.map(input => renderInput(input))}\n        <KeyPair />\n        <div className=\"cta_block\">\n          <CTAtxt />\n          <div className=\"cta\">\n        \b   <input type=\"submit\" onClick={setSubmit} value={btnName} className=\"btn btn-primary\" />\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default FormPanel;"]},"metadata":{},"sourceType":"module"}